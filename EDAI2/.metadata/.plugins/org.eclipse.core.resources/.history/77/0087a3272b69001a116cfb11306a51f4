
/** Problema Selección –Divide y Vencerás –Implementación *//** Método públicoselect• Llama aselectReccon los parámetros iniciales*//*** Retorna el elemento del array t que ocuparía la* posición k-ésima en el caso de que el array* estuviera ordenado* @param t array* @param k posición del elemento buscado (la primera* posición es la 1, no la 0)* @return valor del elemento buscado*/public static int select(int[] t, int k) {return selectRec(t,0,t.length-1,k);}/** Método privadoselectRec• Es el que realmente implementa el algoritmo recursivo DyV*//*** Retorna el elemento de la parte del array t* comprendida entre los índices ini y fin que ocuparía* la posición k-ésima (en esa parte) en el caso de que* esa parte estuviera ordenada* @param t array* @param ini índice inicial de la parte de t utilizada* @param fin índice final de la parte de t utilizada* @param k posición del elemento buscado (la primera* posición es la 1, no la 0)* @return valor del elemento buscado*/private static int selectRec(int[] t,int ini, int fin, int k) {// caso directoif (ini == fin) {return t[ini]; // elemento en la pos. k-ésima}// reorganiza los elementos y retorna la posición// del último elemento menor que el pivoteint p = reorganiza(t, ini, fin);int k1 = p -ini + 1; // offset del primer elemento// mayor que el pivote// divideif (k <= k1) {return selectRec(t,ini,p,k);} else {return selectRec(t,p+1,fin,k-k1);}}/*** Reorganiza la parte de t comprendida entre los* índices ini y fin en dos partes, una con los
* elementos mayores que el pivote y otra con los* menores. Se toma como pivote t[ini]* @param t array* @param ini índice inicial de la parte de t utilizada* @param fin índice final de la parte de t utilizada* @return índice del último ele. menor que el pivote*/private static int reorganiza(int[] t,int ini, int fin) {int x=t[ini]; // usa el primer ele. como pivoteint i=ini-1; int j=fin+1;while (true) {do { // busca ele. menor o igual que el pivotej--;}while (t[j]>x);do { // busca ele. mayor o igual que el pivotei++;} while (t[i]<x);if (i < j) {int z=t[i]; t[i]=t[j]; t[j]=z; // intercambio} else {return(j);}}}
